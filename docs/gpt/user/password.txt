- напиши 2 функции на языке golang для хеширования и првоерки пароля используя библиотеку bcrypt


Конечно! Вот две функции на языке Go для хеширования и проверки пароля с использованием библиотеки bcrypt:
package main

import (
	"fmt"
	"golang.org/x/crypto/bcrypt"
)

// Функция для хеширования пароля
func HashPassword(password string) (string, error) {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return "", err
	}
	return string(hashedPassword), nil
}

// Функция для проверки пароля
func CheckPassword(password, hashedPassword string) bool {
	err := bcrypt.CompareHashAndPassword([]byte(hashedPassword), []byte(password))
	return err == nil
}

func main() {
	password := "myPassword123"

	// Хеширование пароля
	hashedPassword, err := HashPassword(password)
	if err != nil {
		fmt.Println("Ошибка при хешировании пароля:", err)
		return
	}

	fmt.Println("Хешированный пароль:", hashedPassword)

	// Проверка пароля
	isValid := CheckPassword(password, hashedPassword)
	fmt.Println("Пароль верный:", isValid)
}
В этом примере мы используем функцию  `GenerateFromPassword`  из пакета  `golang.org/x/crypto/bcrypt`  для хеширования пароля. Функция  `GenerateFromPassword`  принимает два аргумента: срез байтов с паролем и стоимость хеширования (количество итераций для создания хеша). Мы используем  `bcrypt.DefaultCost` , чтобы использовать стандартную стоимость хеширования bcrypt.

Для проверки пароля мы используем функцию  `CompareHashAndPassword` , которая сравнивает хешированный пароль с исходным паролем. Если пароль верный, функция возвращает  `nil` , иначе - ошибку.

Надеюсь, это поможет вам! Если у вас есть еще вопросы, не стесняйтесь задавать.